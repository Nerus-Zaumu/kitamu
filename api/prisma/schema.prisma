generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id        String    @id @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  role      Role      @default(CUSTOMER)
  user      customer?
  store     store?
}

model customer {
  id        String   @id @unique @default(uuid())
  fullName  String?  @unique
  image     Bytes?
  age       Int?
  accountId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orderId   String   @unique
  account   account  @relation(fields: [accountId], references: [id])
  order     order    @relation(fields: [orderId], references: [id])
  profile   profile?
  ratings   rating[] @relation("customerTorating")
}

model store {
  id           String        @id @unique @default(uuid())
  name         String
  logo         Bytes         @unique
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  accountId    String        @unique
  orderId      String        @unique
  profile      profile?
  rating       rating?
  account      account       @relation(fields: [accountId], references: [id])
  order        order         @relation(fields: [orderId], references: [id])
  subscription subscription?
  meals meal[]

}

model profile {
  id      String   @id @unique @default(uuid())
  type    Role
  address String
  userId  String   @unique
  storeId String   @unique
  store   store    @relation(fields: [storeId], references: [id])
  user    customer @relation(fields: [userId], references: [id])
}

model meal {
  id          String  @id @unique @default(uuid())
  name        String
  thumbnail   Bytes   @unique
  description String
  discount    Float   @default(0.0)
  price       Float   @default(0.0)
  Order       order[] @relation("mealToorder")
  store store @relation(fields: [storeId], references: [id])
  storeId String 
  status MealStatus @default(UNAVAILABLE)
}

model order {
  id        String      @id @unique @default(uuid())
  cost      Float       @default(0.0)
  status    OrderStatus @default(UNORDERED)
  createdAt DateTime    @default(now())
  user      customer?
  payment   payment?
  store     store?
  meals     meal[]      @relation("mealToorder")
}

model payment {
  id      String      @id @unique @default(uuid())
  type    PaymentType @default(PAYPAL)
  amount  Float       @default(0.0)
  orderId String      @unique
  order   order       @relation(fields: [orderId], references: [id])
}

model subscription {
  id      String             @id @unique @default(uuid())
  period  SubscriptionPeriod @default(MONTHLY)
  amount  SubscriptionPrice  @default(MONTHLY)
  storeId String             @unique
  store   store              @relation(fields: [storeId], references: [id])
}

model rating {
  id      String     @id @unique @default(uuid())
  rating  RatingType
  storeId String     @unique
  store   store      @relation(fields: [storeId], references: [id])
  raters  customer[] @relation("customerTorating")
}

model store_application {
  id          String @id @unique @default(uuid())
  name        String
  description String
  email       String
  address     String
}

enum Role {
  CUSTOMER
  ADMIN
  STORE
}

enum SubscriptionPeriod {
  MONTHLY
  QUARTERLY
  HALFYEARLY
  YEARLY
}

enum SubscriptionPrice {
  MONTHLY    @map("1000")
  QUARTERLY  @map("2500")
  HALFYEARLY @map("4000")
  YEARLY     @map("6000")
}

enum OrderStatus {
  UNORDERED
  PENDING
  CANCELLED
  COMPLETED
}

enum PaymentType {
  PAYPAL
  CREDIT_CARD
  MOBILE_PAYMENT
}

enum RatingType {
  BAD
  MEDIOCRE
  NORMAL
  GOOD
  EXCELLENT
}

enum MealStatus {
  AVAILABLE
  UNAVAILABLE
}